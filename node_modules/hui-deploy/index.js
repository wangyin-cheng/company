"use strict";

const archiver = require("archiver");
const fs = require("fs-extra");
const rm = require("rimraf");

const { genDeployXml, genScripts } = require("./lib/see");

const tmp = "tmp";

/**
 * @description 系统类型、应用类型和版本决定了发布物的唯一性
 * @param {seePackageName} 生成的发布物的 zip 包名称
 * @param {options}
 * @property {options.system} 系统类型, SEE 平台的分组是以系统类型字段纬度来的
 * @property {options.type} 应用类型, 外框架 - bizframe ｜ 子系统 - subsystem
 * @property {options.name} 应用名称
 * @property {options.version} 版本
 * @param {handler} 回调函数
 */
exports.genSeePackage = function(seePackageName, options, handler) {
  const { system, type, name, version } = options;
  fs.ensureDirSync(tmp);

  fs.ensureDirSync(`${tmp}/scripts`);
  fs.outputFileSync(`./${tmp}/scripts/${name}/utils.py`, genScripts("utils"));
  fs.outputFileSync(
    `./${tmp}/scripts/${name}/install.py`,
    genScripts("install", { name, type })
  );
  fs.outputFileSync(
    `./${tmp}/scripts/${name}/uninstall.py`,
    genScripts("uninstall", { name, type })
  );

  fs.ensureDirSync(`${tmp}/template`); // TODO

  fs.outputFileSync(
    `./${tmp}/deploy.xml`,
    genDeployXml(system, type, name, version)
  );

  if (handler) {
    handler(() => {
      genZipPackage(seePackageName, () => {
        rm.sync(tmp);
      });
    });
  } else {
    genZipPackage(seePackageName, () => {
      rm.sync(tmp);
    });
  }
};

function genZipPackage(zipPackageName, cb) {
  const output = fs.createWriteStream(`${zipPackageName}.zip`);

  output.on("close", function() {
    setTimeout(function() {
      cb && cb();
    });
  });

  const archive = archiver("zip", { zlib: { level: 9 } }); // Sets the compression level.

  archive.on("error", function(error) {
    console.error();
    console.error(error.stack || error);
    error.details && console.error(error.details);
  });

  archive.pipe(output);
  archive.directory(tmp, false);
  archive.finalize();
}
